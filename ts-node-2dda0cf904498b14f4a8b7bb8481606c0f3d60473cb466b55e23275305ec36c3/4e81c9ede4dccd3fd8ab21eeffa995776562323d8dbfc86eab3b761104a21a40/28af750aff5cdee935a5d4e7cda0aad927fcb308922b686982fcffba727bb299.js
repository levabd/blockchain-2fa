"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helper = require('./helpers');
const Markup = require('telegraf/markup');
const console = require('tracer').colorConsole();
const format = require('util').format;
exports.telegramContactHandler = (User, Messages) => {
    let route = (ctx) => {
        if (ctx.message.contact.user_id !== ctx.from.id) {
            console.log('contact number is not number of session user');
            let message = format(Messages.notyournumber, helper.getUserFullName(ctx.from));
            ctx.reply(message);
            return;
        }
        let newUser = new User({
            chatId: ctx.from.id,
            number: helper.modifyPhoneNumber(ctx.message.contact.phone_number),
            title: helper.getUserFullName(ctx.message.contact)
        });
        return newUser.save()
            .then(() => {
            console.log('user registered');
            let message = format(Messages.registered, helper.getUserFullName(ctx.from));
            ctx.reply(message, Markup.removeKeyboard().extra());
        })
            .catch(console.log);
    };
    return { route };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvcGVzaGtvdi9kZXYvcHJvamVjdHMvYmxvY2tjaGFpbi0yZmEtYmFja2VuZC9zcmMvc2VydmljZXMvdGVsZWdyYW0vdGVsZWdyYW0uY29udGFjdC5oYW5kbGVyLnRzIiwic291cmNlcyI6WyIvaG9tZS9wZXNoa292L2Rldi9wcm9qZWN0cy9ibG9ja2NoYWluLTJmYS1iYWNrZW5kL3NyYy9zZXJ2aWNlcy90ZWxlZ3JhbS90ZWxlZ3JhbS5jb250YWN0LmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFcEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDMUMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ2pELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFFekIsUUFBQSxzQkFBc0IsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRTtJQUNyRCxJQUFJLEtBQUssR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ2hCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1lBQzVELElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDL0UsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUM7UUFDWCxDQUFDO1FBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUM7WUFDbkIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQixNQUFNLEVBQUUsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztZQUNsRSxLQUFLLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztTQUNyRCxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTthQUNoQixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9CLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDNUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUM7SUFFRixNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZWxwZXIgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcbi8vIGNvbnN0IEV4dHJhID0gcmVxdWlyZSgndGVsZWdyYWYvZXh0cmEnKVxuY29uc3QgTWFya3VwID0gcmVxdWlyZSgndGVsZWdyYWYvbWFya3VwJyk7XG5jb25zdCBjb25zb2xlID0gcmVxdWlyZSgndHJhY2VyJykuY29sb3JDb25zb2xlKCk7XG5jb25zdCBmb3JtYXQgPSByZXF1aXJlKCd1dGlsJykuZm9ybWF0O1xuXG5leHBvcnQgY29uc3QgdGVsZWdyYW1Db250YWN0SGFuZGxlciA9IChVc2VyLCBNZXNzYWdlcykgPT4ge1xuICAgIGxldCByb3V0ZSA9IChjdHgpID0+IHtcbiAgICAgICAgaWYgKGN0eC5tZXNzYWdlLmNvbnRhY3QudXNlcl9pZCAhPT0gY3R4LmZyb20uaWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjb250YWN0IG51bWJlciBpcyBub3QgbnVtYmVyIG9mIHNlc3Npb24gdXNlcicpO1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBmb3JtYXQoTWVzc2FnZXMubm90eW91cm51bWJlciwgaGVscGVyLmdldFVzZXJGdWxsTmFtZShjdHguZnJvbSkpO1xuICAgICAgICAgICAgY3R4LnJlcGx5KG1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5ld1VzZXIgPSBuZXcgVXNlcih7XG4gICAgICAgICAgICBjaGF0SWQ6IGN0eC5mcm9tLmlkLFxuICAgICAgICAgICAgbnVtYmVyOiBoZWxwZXIubW9kaWZ5UGhvbmVOdW1iZXIoY3R4Lm1lc3NhZ2UuY29udGFjdC5waG9uZV9udW1iZXIpLFxuICAgICAgICAgICAgdGl0bGU6IGhlbHBlci5nZXRVc2VyRnVsbE5hbWUoY3R4Lm1lc3NhZ2UuY29udGFjdClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ld1VzZXIuc2F2ZSgpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3VzZXIgcmVnaXN0ZXJlZCcpO1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gZm9ybWF0KE1lc3NhZ2VzLnJlZ2lzdGVyZWQsIGhlbHBlci5nZXRVc2VyRnVsbE5hbWUoY3R4LmZyb20pKTtcbiAgICAgICAgICAgICAgICBjdHgucmVwbHkobWVzc2FnZSwgTWFya3VwLnJlbW92ZUtleWJvYXJkKCkuZXh0cmEoKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGNvbnNvbGUubG9nKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtyb3V0ZX07XG59O1xuIl19