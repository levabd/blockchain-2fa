"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const env_1 = require("../../../config/env");
const WebSocket = require("ws");
const changeCase = require("change-case");
const helpers_1 = require("../../../services/helpers/helpers");
const redis = require("redis");
const Promisefy = require("bluebird");
const constants_1 = require("../../../config/constants");
const DICT = {
    ru: {
        not_verified: 'Пользователь не прошёл верификацию в мобильном приложении',
        telegram_bot_unregistered: 'Пользователь не зарегистрировался у боте телеграмма @BlockchainTfaBot',
        error_decode_user_bc: 'Ошибка при получении пользователя из блокчейна',
        unknown_error: 'Неизвестная ошибка'
    },
    en: {
        not_verified: 'User is not verified',
        telegram_bot_unregistered: 'User select telegram, but not registered in it yet',
        error_decode_user_bc: 'Cant decode user',
        unknown_error: 'User is not verified'
    },
};
class ApiController {
    constructor(tfaTF, kaztelTF, egovTF) {
        this.tfaTF = tfaTF;
        this.kaztelTF = kaztelTF;
        this.egovTF = egovTF;
        Promisefy.promisifyAll(redis);
        const redisURL = `redis://${env_1.EnvConfig.REDIS_HOST}:${env_1.EnvConfig.REDIS_PORT}`;
        this.redisClient = redis.createClient({ url: redisURL });
    }
    transformLog(log, service) {
        const fieldsToHandle = Object.keys(log);
        let obj = {};
        for (let f of fieldsToHandle) {
            if (f == 'Status' || f == 'ExpiredAt' || f == 'Method' || f == 'ActionTime') {
                continue;
            }
            obj[changeCase.snakeCase(f)] = log[f];
        }
        obj['service'] = service;
        return obj;
    }
    getLatestCode(user) {
        let sendCodeArrayKeysSorted = [];
        const userKeys = Object.keys(user.Logs);
        if (userKeys.length === 0) {
            return { status: 'no_send_codes' };
        }
        const currentTimestamp = (new Date()).getTime() / 1000;
        const keysLength = userKeys.length - 1;
        let sendCodeArrayKeys = [];
        let validCodeArrayKeys = [];
        for (let i = 0; i <= userKeys.length; i++) {
            const log = user.Logs[userKeys[i]];
            if (!log.Status) {
                continue;
            }
            if (log.Status === constants_1.SEND_CODE || log.Status === constants_1.RESEND_CODE) {
                if (currentTimestamp <= log.ExpiredAt && log.Method === 'push') {
                    sendCodeArrayKeys.push(parseInt(userKeys[i], 10));
                }
            }
            if (log.Status === constants_1.VALID || log.Status === constants_1.REJECT) {
                validCodeArrayKeys.push(parseInt(userKeys[i], 10));
            }
            if (i !== keysLength) {
                continue;
            }
            if (sendCodeArrayKeys.length === 0) {
                return { status: 'no_send_codes' };
            }
            sendCodeArrayKeysSorted = sendCodeArrayKeys.sort(helpers_1.sortNumber);
            const latestCodeIndex = sendCodeArrayKeysSorted.length === 1
                ? sendCodeArrayKeysSorted[0]
                : sendCodeArrayKeysSorted[sendCodeArrayKeysSorted.length - 1];
            const latestLog = user.Logs[latestCodeIndex];
            if (!validCodeArrayKeys.length) {
                return { status: 'success', log: latestLog };
            }
            const validKeysLength = validCodeArrayKeys.length - 1;
            for (let j = 0; j < validCodeArrayKeys.length; j++) {
                const logValid = user.Logs[validCodeArrayKeys[j]];
                if (logValid.Code === latestLog.Code) {
                    return { status: 'no_code_used' };
                }
                if (j === validKeysLength) {
                    return { status: 'success', log: latestLog };
                }
            }
        }
    }
    getMessage(lang, locale = 'unknown_error') {
        let _lang = lang;
        if (!DICT[_lang]) {
            _lang = 'en';
        }
        return DICT[_lang][locale] || DICT[_lang]['unknown_error'];
    }
    getUserNotFoundMessage(lang) {
        return lang === 'ru' ? 'Пользователь не найден' : 'User not found';
    }
    openWsConnection(addresses) {
        console.log('openWsConnection', `ws:${env_1.EnvConfig.VALIDATOR_REST_API_USER}:${env_1.EnvConfig.VALIDATOR_REST_API_PASS}@${env_1.EnvConfig.VALIDATOR_REST_API}/subscriptions`);
        let ws = new WebSocket(`ws:${env_1.EnvConfig.VALIDATOR_REST_API_USER}:${env_1.EnvConfig.VALIDATOR_REST_API_PASS}@${env_1.EnvConfig.VALIDATOR_REST_API}/subscriptions`);
        ws.onopen = () => {
            ws.send(JSON.stringify({
                'action': 'subscribe',
                'address_prefixes': addresses
            }));
        };
        ws.onclose = () => {
            try {
                ws.send(JSON.stringify({
                    'action': 'unsubscribe'
                }));
            }
            catch (e) {
                console.log('e', e);
            }
        };
        console.log('return', 'return');
        return ws;
    }
    getUser(phoneNumber, service) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!phoneNumber) {
                return null;
            }
            if (phoneNumber.charAt(0) === '+') {
                phoneNumber = phoneNumber.substring(1);
            }
            phoneNumber = phoneNumber.substr(phoneNumber.length - 10);
            const phoneNumberSeven = `7${phoneNumber}`;
            const phoneNumberEight = `8${phoneNumber}`;
            let user = null;
            try {
                user = yield this._getUser(phoneNumberSeven, service);
                return user;
            }
            catch (e) {
                console.log(`Cant find user with phone number: ${phoneNumberSeven}. Trying to find with number: ${phoneNumberEight}`);
                try {
                    user = yield this._getUser(phoneNumberEight, service);
                    return user;
                }
                catch (e) {
                    console.log(`Cant find user with phone number: ${phoneNumberEight}. Return null`);
                    return null;
                }
            }
        });
    }
    _getUser(phoneNumber, service) {
        return __awaiter(this, void 0, void 0, function* () {
            let user;
            try {
                switch (service) {
                    case 'kaztel':
                        user = yield this.kaztelTF.getUser(phoneNumber);
                        break;
                    case 'egov':
                        user = yield this.egovTF.getUser(phoneNumber);
                        break;
                    default:
                        user = yield this.tfaTF.getStateByPhoneNumber(phoneNumber);
                        break;
                }
                if (user.PhoneNumber == '') {
                    return null;
                }
            }
            catch (e) {
                return null;
            }
            return user;
        });
    }
}
exports.ApiController = ApiController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,