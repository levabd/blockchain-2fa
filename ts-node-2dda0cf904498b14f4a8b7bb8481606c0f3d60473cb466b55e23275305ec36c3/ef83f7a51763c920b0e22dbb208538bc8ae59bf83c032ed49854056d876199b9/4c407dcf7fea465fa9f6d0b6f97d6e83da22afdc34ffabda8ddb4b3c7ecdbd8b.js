"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const { createHash } = require('crypto');
const { protobuf } = require('sawtooth-sdk');
const { createContext, CryptoFactory } = require('sawtooth-sdk/signing');
const request = require("request-promise-native");
const env_1 = require("../../config/env");
const helpers_1 = require("../helpers/helpers");
const fs = require("fs");
const protobufMe = require('protocol-buffers');
const messagesClientService = protobufMe(fs.readFileSync('src/proto/service_client.proto'));
const AVAILABLE_TFS = {
    kaztel: {
        name: env_1.EnvConfig.KAZTEL_FAMILY_NAME,
        version: env_1.EnvConfig.KAZTEL_FAMILY_VERSION,
    },
    egov: {
        name: env_1.EnvConfig.EGOV_FAMILY_NAME,
        version: env_1.EnvConfig.EGOV_FAMILY_VERSION,
    },
    tfa: {
        name: env_1.EnvConfig.TFA_FAMILY_NAME,
        version: env_1.EnvConfig.TFA_FAMILY_VERSION,
    },
};
exports.CODE_CREATE = 0;
exports.CODE_UPDATE = 1;
exports.CODE_GENERATE = 2;
exports.CODE_VERIFY = 3;
let ChainService = class ChainService {
    constructor() {
        this.context = createContext('secp256k1');
        const privateKey = this.context.newRandomPrivateKey();
        this.signer = new CryptoFactory(this.context).newSigner(privateKey);
    }
    initTF(name) {
        this.tf = AVAILABLE_TFS[name]['name'];
        this.tfVersion = AVAILABLE_TFS[name]['version'];
        this.prefix = helpers_1._hash(name).substring(0, 6);
    }
    setPrefix(name) {
        this.prefix = helpers_1._hash(name).substring(0, 6);
    }
    getAddress(phoneNumber, prefix) {
        if (prefix) {
            this.setPrefix(prefix);
        }
        return this.prefix + helpers_1._hash(phoneNumber.toString()).slice(-64);
    }
    updateUser(phoneNumber, user, service = 'tfa') {
        this.initTF(service || 'tfa');
        return this.addTransaction({
            Action: exports.CODE_UPDATE,
            PhoneNumber: phoneNumber,
            PayloadUser: user,
        }, this.getAddress(phoneNumber)).then(response => {
            return JSON.parse(response).data;
        }).catch(error => {
            console.log('invalid response', error);
            throw new Error(error);
        });
    }
    getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    generateCode(phoneNumber, log, tf) {
        this.initTF(tf || 'kaztel');
        const address = this.getAddress(phoneNumber);
        const payloadData = messagesClientService.SCPayload.encode({
            Action: exports.CODE_GENERATE,
            PhoneNumber: phoneNumber,
            PayloadLog: log,
        });
        return this.addTransaction(payloadData, address).then(response => {
            console.log('generateCode@response', response);
            return JSON.parse(response);
        }).catch(error => {
            console.log('invalid response', error);
            throw new Error(error);
        });
    }
    verify(phoneNumber, log, tf) {
        this.initTF(tf || 'kaztel');
        const address = this.getAddress(phoneNumber);
        const payloadData = messagesClientService.SCPayload.encode({
            Action: exports.CODE_VERIFY,
            PhoneNumber: phoneNumber,
            PayloadLog: log,
        });
        return this.addTransaction(payloadData, address).then(response => {
            return JSON.parse(response);
        }).catch(error => {
            console.log('statusCode ', error.pesponse.statusCode);
            console.log('error ', error);
            throw new Error(error);
        });
    }
    getSignedBatch(transactionList) {
        const batchHeaderBytes = protobuf.BatchHeader.encode({
            signerPublicKey: this.signer.getPublicKey().asHex(),
            transactionIds: transactionList.map((txn) => txn.headerSignature),
        }).finish();
        const signature = this.signer.sign(batchHeaderBytes);
        const batch = protobuf.Batch.create({
            header: batchHeaderBytes,
            headerSignature: signature,
            transactions: transactionList
        });
        return protobuf.BatchList.encode({
            batches: [batch]
        }).finish();
    }
    addTransaction(payloadBytes, address, dependOn = '') {
        const transactionHeaderBytes = protobuf.TransactionHeader.encode({
            familyName: this.tf,
            familyVersion: this.tfVersion,
            inputs: [address],
            outputs: [address],
            signerPublicKey: this.signer.getPublicKey().asHex(),
            batcherPublicKey: this.signer.getPublicKey().asHex(),
            dependencies: [],
            payloadSha512: createHash('sha512').update(payloadBytes).digest('hex')
        }).finish();
        const signature = this.signer.sign(transactionHeaderBytes);
        const transaction = protobuf.Transaction.create({
            header: transactionHeaderBytes,
            headerSignature: signature,
            payload: payloadBytes
        });
        console.log('`${EnvConfig.VALIDATOR_REST_API}/batches`', `${env_1.EnvConfig.VALIDATOR_REST_API}/batches`, {
            user: env_1.EnvConfig.VALIDATOR_REST_API_USER,
            pass: env_1.EnvConfig.VALIDATOR_REST_API_PASS
        });
        const bodyAsBytes = this.getSignedBatch([transaction]);
        return request.post({
            family: 4,
            port: 80,
            auth: {
                user: env_1.EnvConfig.VALIDATOR_REST_API_USER,
                pass: env_1.EnvConfig.VALIDATOR_REST_API_PASS
            },
            url: `${env_1.EnvConfig.VALIDATOR_REST_API}/batches`,
            body: bodyAsBytes,
            headers: { 'Content-Type': 'application/octet-stream' }
        });
    }
};
ChainService = __decorate([
    common_1.Component(),
    __metadata("design:paramtypes", [])
], ChainService);
exports.ChainService = ChainService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,