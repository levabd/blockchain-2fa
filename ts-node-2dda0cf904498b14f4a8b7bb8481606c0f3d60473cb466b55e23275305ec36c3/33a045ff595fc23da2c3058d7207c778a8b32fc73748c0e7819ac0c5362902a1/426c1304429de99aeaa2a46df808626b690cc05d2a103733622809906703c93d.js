"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helper = require('./helpers');
const Markup = require('telegraf/markup');
const console = require('tracer').colorConsole();
const format = require('util').format;
exports.telegramStartHandler = (User, Messages) => {
    let route = (ctx) => {
        let chatId = ctx.update.message.from.id;
        console.log('chatId:', chatId);
        return User.findOne({ chatId })
            .then((currentUser) => {
            console.log('currentUser:', currentUser);
            if (!currentUser) {
                console.log('current user not found in db, request to send number');
                let message = format(Messages.hello, helper.getUserFullName(ctx.from));
                ctx.reply(message, Markup
                    .keyboard([
                    Markup.contactRequestButton('Отправить номер')
                ])
                    .oneTime(true)
                    .resize(false)
                    .extra());
            }
            else {
                console.log('user already registered', currentUser);
                let message = format(Messages.exist, helper.getUserFullName(ctx.from));
                ctx.reply(message, Markup.removeKeyboard().extra());
            }
        })
            .catch(console.log);
    };
    return { route };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvcGVzaGtvdi9kZXYvcHJvamVjdHMvYmxvY2tjaGFpbi0yZmEtYmFja2VuZC9zcmMvc2VydmljZXMvdGVsZWdyYW0vdGVsZWdyYW0uc3RhcnQuaGFuZGxlci50cyIsInNvdXJjZXMiOlsiL2hvbWUvcGVzaGtvdi9kZXYvcHJvamVjdHMvYmxvY2tjaGFpbi0yZmEtYmFja2VuZC9zcmMvc2VydmljZXMvdGVsZWdyYW0vdGVsZWdyYW0uc3RhcnQuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUVwQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUMxQyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDakQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUV6QixRQUFBLG9CQUFvQixHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFO0lBQ25ELElBQUksS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDaEIsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBQyxDQUFDO2FBQzVCLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ3pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDZixPQUFPLENBQUMsR0FBRyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7Z0JBQ3BFLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZFLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU07cUJBQ3BCLFFBQVEsQ0FBQztvQkFDTixNQUFNLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUM7aUJBQ2pELENBQUM7cUJBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQztxQkFDYixNQUFNLENBQUMsS0FBSyxDQUFDO3FCQUNiLEtBQUssRUFBRSxDQUNYLENBQUM7WUFDTixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRSxXQUFXLENBQUMsQ0FBQztnQkFDcEQsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDdkUsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDeEQsQ0FBQztRQUNMLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0lBRUYsTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUM7QUFDbkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaGVscGVyID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG4vLyBjb25zdCBFeHRyYSA9IHJlcXVpcmUoJ3RlbGVncmFmL2V4dHJhJylcbmNvbnN0IE1hcmt1cCA9IHJlcXVpcmUoJ3RlbGVncmFmL21hcmt1cCcpO1xuY29uc3QgY29uc29sZSA9IHJlcXVpcmUoJ3RyYWNlcicpLmNvbG9yQ29uc29sZSgpO1xuY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgndXRpbCcpLmZvcm1hdDtcblxuZXhwb3J0IGNvbnN0IHRlbGVncmFtU3RhcnRIYW5kbGVyID0gKFVzZXIsIE1lc3NhZ2VzKSA9PiB7XG4gICAgbGV0IHJvdXRlID0gKGN0eCkgPT4ge1xuICAgICAgICBsZXQgY2hhdElkID0gY3R4LnVwZGF0ZS5tZXNzYWdlLmZyb20uaWQ7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjaGF0SWQ6JywgY2hhdElkKTtcbiAgICAgICAgcmV0dXJuIFVzZXIuZmluZE9uZSh7Y2hhdElkfSlcbiAgICAgICAgLnRoZW4oKGN1cnJlbnRVc2VyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY3VycmVudFVzZXI6JywgY3VycmVudFVzZXIpO1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjdXJyZW50IHVzZXIgbm90IGZvdW5kIGluIGRiLCByZXF1ZXN0IHRvIHNlbmQgbnVtYmVyJyk7XG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBmb3JtYXQoTWVzc2FnZXMuaGVsbG8sIGhlbHBlci5nZXRVc2VyRnVsbE5hbWUoY3R4LmZyb20pKTtcbiAgICAgICAgICAgICAgICBjdHgucmVwbHkobWVzc2FnZSwgTWFya3VwXG4gICAgICAgICAgICAgICAgICAgIC5rZXlib2FyZChbXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXJrdXAuY29udGFjdFJlcXVlc3RCdXR0b24oJ9Ce0YLQv9GA0LDQstC40YLRjCDQvdC+0LzQtdGAJylcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgLm9uZVRpbWUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLnJlc2l6ZShmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgLmV4dHJhKClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndXNlciBhbHJlYWR5IHJlZ2lzdGVyZWQnLCBjdXJyZW50VXNlcik7XG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBmb3JtYXQoTWVzc2FnZXMuZXhpc3QsIGhlbHBlci5nZXRVc2VyRnVsbE5hbWUoY3R4LmZyb20pKTtcbiAgICAgICAgICAgICAgICBjdHgucmVwbHkobWVzc2FnZSwgTWFya3VwLnJlbW92ZUtleWJvYXJkKCkuZXh0cmEoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChjb25zb2xlLmxvZyk7XG4gICAgfTtcblxuICAgIHJldHVybiB7cm91dGV9O1xufTtcbiJdfQ==