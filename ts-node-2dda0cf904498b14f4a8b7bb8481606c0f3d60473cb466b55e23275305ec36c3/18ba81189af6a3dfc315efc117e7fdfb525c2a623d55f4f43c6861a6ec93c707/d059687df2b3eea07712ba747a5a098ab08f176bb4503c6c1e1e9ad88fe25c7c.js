"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv/config");
const helpers_1 = require("../services/helpers/helpers");
class EnvConfig {
}
EnvConfig.NODE_ENV = process.env['NODE_ENV'] || 'LOCAL';
EnvConfig.API_KEY = process.env['API_KEY'] || 'sgdfhdmgdkfgjk';
EnvConfig.API_KEY_FRONTEND = process.env['API_KEY_FRONTEND'] || 'sgdfhdmgdkfgjk';
EnvConfig.API_PATH = process.env['API_PATH'];
EnvConfig.PORT = process.env['PORT'] || 4001;
EnvConfig.REDIS_HOST = process.env['REDIS_HOST'];
EnvConfig.REDIS_PORT = process.env['REDIS_PORT'];
EnvConfig.SMS_USERNAME = process.env['SMS_USERNAME'];
EnvConfig.SMS_PASSWORD = process.env['SMS_PASSWORD'];
EnvConfig.SMS_CALLBACK_TOKEN = process.env['SMS_CALLBACK_TOKEN'];
EnvConfig.FIREBASE_CLOUD_KEY = process.env['FIREBASE_CLOUD_KEY'];
EnvConfig.TFA_FAMILY_NAME = process.env['TFA_FAMILY_NAME'];
EnvConfig.TFA_FAMILY_VERSION = process.env['TFA_FAMILY_VERSION'] || '0.1';
EnvConfig.TFA_FAMILY_NAMESPACE = helpers_1.hash(process.env['TFA_FAMILY_NAME']).substring(0, 6);
EnvConfig.KAZTEL_FAMILY_NAME = process.env['KAZTEL_FAMILY_NAME'];
EnvConfig.KAZTEL_FAMILY_VERSION = process.env['KAZTEL_FAMILY_VERSION'] || '0.1';
EnvConfig.EGOV_FAMILY_NAME = process.env['EGOV_FAMILY_NAME'];
EnvConfig.EGOV_FAMILY_VERSION = process.env['EGOV_FAMILY_VERSION'];
EnvConfig.VALIDATOR_REST_API = process.env['VALIDATOR_REST_API'];
EnvConfig.VALIDATOR_REST_API_PASS = process.env['VALIDATOR_REST_API_PASS'];
EnvConfig.VALIDATOR_REST_API_USER = process.env['VALIDATOR_REST_API_USER'];
EnvConfig.VALIDATOR_REST_API_WS = process.env['VALIDATOR_REST_API_WS'];
EnvConfig.FRONTEND_API = process.env['FRONTEND_API'];
EnvConfig.KAZTEL_CALLBACK_URL = process.env['KAZTEL_CALLBACK_URL'];
EnvConfig.EGOV_CALLBACK_URL = process.env['EGOV_CALLBACK_URL'];
EnvConfig.TELEGRAM_BOT_KEY = process.env['TELEGRAM_BOT_KEY'];
EnvConfig.MONGO_DB = process.env['MONGO_DB'];
exports.EnvConfig = EnvConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvcGVzaGtvdi9kZXYvcHJvamVjdHMvYmxvY2tjaGFpbi0yZmEtYmFja2VuZC9zcmMvY29uZmlnL2Vudi50cyIsInNvdXJjZXMiOlsiL2hvbWUvcGVzaGtvdi9kZXYvcHJvamVjdHMvYmxvY2tjaGFpbi0yZmEtYmFja2VuZC9zcmMvY29uZmlnL2Vudi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUF1QjtBQUN2Qix5REFBaUQ7QUFTakQ7O0FBR2tCLGtCQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxPQUFPLENBQUM7QUFDOUMsaUJBQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLGdCQUFnQixDQUFDO0FBQ3JELDBCQUFnQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQztBQUN2RSxrQkFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsY0FBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDO0FBR25DLG9CQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN2QyxvQkFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7QUFHdkMsc0JBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzNDLHNCQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUMzQyw0QkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFHdkQsNEJBQWtCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBR3ZELHlCQUFlLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2pELDRCQUFrQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsSUFBSSxLQUFLLENBQUM7QUFDaEUsOEJBQW9CLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFNUUsNEJBQWtCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3ZELCtCQUFxQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsSUFBSSxLQUFLLENBQUM7QUFFdEUsMEJBQWdCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ25ELDZCQUFtQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUV6RCw0QkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDdkQsaUNBQXVCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ2pFLGlDQUF1QixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUNqRSwrQkFBcUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFN0Qsc0JBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRzNDLDZCQUFtQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUN6RCwyQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDckQsMEJBQWdCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRW5ELGtCQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQTVDckQsOEJBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdkb3RlbnYvY29uZmlnJztcbmltcG9ydCB7aGFzaH0gZnJvbSAnLi4vc2VydmljZXMvaGVscGVycy9oZWxwZXJzJztcblxuLyoqXG4gKiBub2RlIEVudkNvbmZpZyB2YXJpYWJsZXMsXG4gKiBjb3B5IC5lbnYuZXhhbXBsZSBmaWxlLCByZW5hbWUgdG8gLmVudlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBFbnZDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIEVudkNvbmZpZyB7XG5cbiAgICAvLyBOT0RFXG4gICAgcHVibGljIHN0YXRpYyBOT0RFX0VOViA9IHByb2Nlc3MuZW52WydOT0RFX0VOViddIHx8ICdMT0NBTCc7XG4gICAgcHVibGljIHN0YXRpYyBBUElfS0VZID0gcHJvY2Vzcy5lbnZbJ0FQSV9LRVknXSB8fCAnc2dkZmhkbWdka2ZnamsnO1xuICAgIHB1YmxpYyBzdGF0aWMgQVBJX0tFWV9GUk9OVEVORCA9IHByb2Nlc3MuZW52WydBUElfS0VZX0ZST05URU5EJ10gfHwgJ3NnZGZoZG1nZGtmZ2prJztcbiAgICBwdWJsaWMgc3RhdGljIEFQSV9QQVRIID0gcHJvY2Vzcy5lbnZbJ0FQSV9QQVRIJ107XG4gICAgcHVibGljIHN0YXRpYyBQT1JUID0gcHJvY2Vzcy5lbnZbJ1BPUlQnXSB8fCA0MDAxO1xuXG4gICAgLy8gUmVkaXMgY29uZmlndXJhdGlvblxuICAgIHB1YmxpYyBzdGF0aWMgUkVESVNfSE9TVCA9IHByb2Nlc3MuZW52WydSRURJU19IT1NUJ107XG4gICAgcHVibGljIHN0YXRpYyBSRURJU19QT1JUID0gcHJvY2Vzcy5lbnZbJ1JFRElTX1BPUlQnXTtcblxuICAgIC8vIFJlZGlzIGNvbmZpZ3VyYXRpb25cbiAgICBwdWJsaWMgc3RhdGljIFNNU19VU0VSTkFNRSA9IHByb2Nlc3MuZW52WydTTVNfVVNFUk5BTUUnXTtcbiAgICBwdWJsaWMgc3RhdGljIFNNU19QQVNTV09SRCA9IHByb2Nlc3MuZW52WydTTVNfUEFTU1dPUkQnXTtcbiAgICBwdWJsaWMgc3RhdGljIFNNU19DQUxMQkFDS19UT0tFTiA9IHByb2Nlc3MuZW52WydTTVNfQ0FMTEJBQ0tfVE9LRU4nXTtcblxuICAgIC8vIENsaWVudFNlcnZpY2UgZW52IHZhcmlhYmxlc1xuICAgIHB1YmxpYyBzdGF0aWMgRklSRUJBU0VfQ0xPVURfS0VZID0gcHJvY2Vzcy5lbnZbJ0ZJUkVCQVNFX0NMT1VEX0tFWSddO1xuXG4gICAgLy8gVHJhbnNhY3Rpb24gRmFtaWxpZXMgY29uZmlnXG4gICAgcHVibGljIHN0YXRpYyBURkFfRkFNSUxZX05BTUUgPSBwcm9jZXNzLmVudlsnVEZBX0ZBTUlMWV9OQU1FJ107XG4gICAgcHVibGljIHN0YXRpYyBURkFfRkFNSUxZX1ZFUlNJT04gPSBwcm9jZXNzLmVudlsnVEZBX0ZBTUlMWV9WRVJTSU9OJ10gfHwgJzAuMSc7XG4gICAgcHVibGljIHN0YXRpYyBURkFfRkFNSUxZX05BTUVTUEFDRSA9IGhhc2gocHJvY2Vzcy5lbnZbJ1RGQV9GQU1JTFlfTkFNRSddKS5zdWJzdHJpbmcoMCwgNik7XG5cbiAgICBwdWJsaWMgc3RhdGljIEtBWlRFTF9GQU1JTFlfTkFNRSA9IHByb2Nlc3MuZW52WydLQVpURUxfRkFNSUxZX05BTUUnXTtcbiAgICBwdWJsaWMgc3RhdGljIEtBWlRFTF9GQU1JTFlfVkVSU0lPTiA9IHByb2Nlc3MuZW52WydLQVpURUxfRkFNSUxZX1ZFUlNJT04nXSB8fCAnMC4xJztcblxuICAgIHB1YmxpYyBzdGF0aWMgRUdPVl9GQU1JTFlfTkFNRSA9IHByb2Nlc3MuZW52WydFR09WX0ZBTUlMWV9OQU1FJ107XG4gICAgcHVibGljIHN0YXRpYyBFR09WX0ZBTUlMWV9WRVJTSU9OID0gcHJvY2Vzcy5lbnZbJ0VHT1ZfRkFNSUxZX1ZFUlNJT04nXTtcblxuICAgIHB1YmxpYyBzdGF0aWMgVkFMSURBVE9SX1JFU1RfQVBJID0gcHJvY2Vzcy5lbnZbJ1ZBTElEQVRPUl9SRVNUX0FQSSddO1xuICAgIHB1YmxpYyBzdGF0aWMgVkFMSURBVE9SX1JFU1RfQVBJX1BBU1MgPSBwcm9jZXNzLmVudlsnVkFMSURBVE9SX1JFU1RfQVBJX1BBU1MnXTtcbiAgICBwdWJsaWMgc3RhdGljIFZBTElEQVRPUl9SRVNUX0FQSV9VU0VSID0gcHJvY2Vzcy5lbnZbJ1ZBTElEQVRPUl9SRVNUX0FQSV9VU0VSJ107XG4gICAgcHVibGljIHN0YXRpYyBWQUxJREFUT1JfUkVTVF9BUElfV1MgPSBwcm9jZXNzLmVudlsnVkFMSURBVE9SX1JFU1RfQVBJX1dTJ107XG5cbiAgICBwdWJsaWMgc3RhdGljIEZST05URU5EX0FQSSA9IHByb2Nlc3MuZW52WydGUk9OVEVORF9BUEknXTtcblxuICAgIC8vIENsaWVudHMgY2FsbGJhY2sgdXJsc1xuICAgIHB1YmxpYyBzdGF0aWMgS0FaVEVMX0NBTExCQUNLX1VSTCA9IHByb2Nlc3MuZW52WydLQVpURUxfQ0FMTEJBQ0tfVVJMJ107XG4gICAgcHVibGljIHN0YXRpYyBFR09WX0NBTExCQUNLX1VSTCA9IHByb2Nlc3MuZW52WydFR09WX0NBTExCQUNLX1VSTCddO1xuICAgIHB1YmxpYyBzdGF0aWMgVEVMRUdSQU1fQk9UX0tFWSA9IHByb2Nlc3MuZW52WydURUxFR1JBTV9CT1RfS0VZJ107XG5cbiAgICBwdWJsaWMgc3RhdGljIE1PTkdPX0RCID0gcHJvY2Vzcy5lbnZbJ01PTkdPX0RCJ107XG59Il19