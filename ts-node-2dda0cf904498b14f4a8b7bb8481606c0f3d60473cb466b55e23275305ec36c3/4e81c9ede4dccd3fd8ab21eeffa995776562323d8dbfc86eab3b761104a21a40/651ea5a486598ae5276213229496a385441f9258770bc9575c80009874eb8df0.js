"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const crc32 = require("crc-32");
const crypto = require("crypto");
const env_1 = require("../../../config/env");
exports.md5 = (contents) => crypto.createHash('md5').update(contents).digest('hex');
const decimalToHexString = (number) => {
    if (number < 0) {
        number = 0xFFFFFFFF + number + 1;
    }
    return number.toString(16).toLowerCase();
};
let ApiKeyCheckerMiddleware = class ApiKeyCheckerMiddleware {
    resolve(...args) {
        return (req, res, next) => {
            console.log('req.headers', req.headers);
            if (!req.headers['api-key']) {
                console.log('ApiKeyCheckerMiddleware@resolve: attempt to execute query with no ip key');
                return res.status(common_1.HttpStatus.UNAUTHORIZED).json({ error: 'Wrong API key' });
            }
            console.log('req.headers[api-key]', req.headers['api-key']);
            const apiKey = req.headers['api-key'];
            const queryData = req.method === 'POST' ? req.body : req.query;
            const phoneNumber = `${queryData.phone_number}` || '';
            console.log('queryData', queryData);
            let strArray = [];
            Object.keys(queryData).forEach((key) => {
                let data = queryData[key];
                if (key === 'phone_umber' && data.charAt(0) === ' ') {
                    data = '+' + data;
                }
                strArray.push(`${key}:${data}`);
            });
            console.log('req.path', req.path);
            console.log('strArray', strArray);
            console.log('EnvConfig.API_KEY', env_1.EnvConfig.API_KEY);
            console.log('phoneNumber', phoneNumber);
            console.log('body', strArray.join(';') + ';');
            const bodySrc = crc32.bstr(strArray.join(';') + ';');
            console.log('bodySrc ', decimalToHexString(bodySrc));
            console.log(`${req.path}::body::${decimalToHexString(bodySrc)}::key::${env_1.EnvConfig.API_KEY}::phone_number::` + phoneNumber);
            const hash = exports.md5(`${req.path}::body::${decimalToHexString(bodySrc)}::key::${env_1.EnvConfig.API_KEY}::phone_number::${phoneNumber}`);
            console.log('hash', hash);
            console.log('отразанная строка', apiKey.substring(0, apiKey.length - 17));
            if (hash !== apiKey.substring(0, apiKey.length - 17)) {
                console.log(`ApiKeyCheckerMiddleware@resolve: attempt to execute query with wrong api key: ${apiKey}`);
                return res.status(common_1.HttpStatus.UNAUTHORIZED).json({ error: 'Wrong API key' });
            }
            next();
        };
    }
};
ApiKeyCheckerMiddleware = __decorate([
    common_1.Middleware()
], ApiKeyCheckerMiddleware);
exports.ApiKeyCheckerMiddleware = ApiKeyCheckerMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,